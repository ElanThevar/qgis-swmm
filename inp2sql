#!/usr/bin/python

# converts epanet file into tables

import sys
import codecs

inp = sys.stdin;
if len(sys.argv) > 1:
    inp = codecs.open(sys.argv[1],'r', encoding='latin-1' )

out = sys.stdout;
if len(sys.argv) > 2:
    out = codecs.open(sys.argv[2],'w', encoding='utf-8')

point_tables = [
    '[JUNCTIONS]', #junction node information
    '[OUTFALLS]', #outfall node information
    '[DIVIDERS]', #flow divider node information
    '[PUMPS]', #pump link information
    '[ORIFICES]', #orifice link information
    ]

line_tables = [
    '[CONDUITS]', #conduit link information
    ]

polygon_tables = [
    '[SUBCATCHMENTS]', #basic subcatchment information
    '[SUBAREAS]', #subcatchment impervious/pervious sub-area data
    ]

table_sections = point_tables+line_tables+polygon_tables+[
    '[RAINGAGES]', #rain gage information
    '[INFILTRATION]', #subcatchment infiltration parameters
    '[GROUNDWATER]', #subcatchment groundwater parameters
    '[CURVES]', #x-y tabular data referenced in other sections
    '[TIMESERIES]', #time series data referenced in other sections
    '[AQUIFERS]', #groundwater aquifer parameters
    '[LOSSES]', #conduit entrance/exit losses and flap valves
    '[BUILDUP]', #buildup functions for pollutants and land uses
    '[WASHOFF]', #washoff functions for pollutants and land uses
    '[COORDINATES]',
    '[VERTICES]',
    ]

misc_sections = [
    '[TITLE]', #project title
    '[OPTIONS]', #analysis options
    '[REPORT]', #output reporting instructions
    '[FILES]', #interface file options
    '[HYDROGRAPHS]', #unit hydrograph data used to construct RDII inflows
    '[EVAPORATION]', #evaporation data
    '[TEMPERATURE]', #air temperature and snow melt data
    '[LID_CONTROLS]', #low impact development control information
    '[LID_USAGE]', #assignment of LID controls to subcatchments
    '[SNOWPACKS]', #subcatchment snow pack parameters
    '[STORAGE]', #storage node information
    '[WEIRS]', #weir link information
    '[OUTLETS]', #outlet link information
    '[XSECTIONS]', #conduit, orifice, and weir cross-section geometry
    '[TRANSECTS]', #transect geometry for conduits with irregular cross-sections
    '[CONTROLS]', #rules that control pump and regulator operation
    '[POLLUTANTS]', #pollutant information
    '[LANDUSES]', #land use categories
    '[COVERAGES]', #assignment of land uses to subcatchments
    '[TREATMENT]', #pollutant removal functions at conveyance system nodes
    '[INFLOWS]', #external hydrograph/pollutograph inflow at nodes
    '[DWF]', #baseline dry weather sanitary inflow at nodes
    '[PATTERNS]', #periodic variation in dry weather inflow
    '[RDII]', #rainfall-dependent I/I information at nodes
    '[LOADINGS]', #initial pollutant loads on subcatchments
    ]


line = inp.readline()
while line:
    if line.rstrip() in table_sections:
        table_name = line.rstrip()[1:-1]
        line = inp.readline()
        if line[0] == ';': # this is a commend for column def
            line = line.replace(';','')
            column_names = line.split()
            for i,c in enumerate(column_names): column_names[i] = c.rstrip()
            values = []
            line = ';'
            while line and line[0] != '[':
                line = inp.readline()
                if line[0] == ';' : 
                    continue
                line = line.rstrip()
                if not line: break
                pos = line.find(';')
                if pos == 0: continue
                if pos >0: line = line[:pos] ;
                values.append(line.split())
                
            # detect the column type: varchar by default, float if all values can be float
            typ = []
            for i,c in enumerate(column_names):
                typ.append('float')
                if c[:2] == 'ID':
                    typ[i] = 'varchar'
                    continue
                for v in values:
                    try:
                        float(v[i])
                    except:
                        typ[i] = 'varchar'
                        break
            # now create the table
            decl = ""
            for i,c in enumerate(column_names): decl+='"'+c+'" '+typ[i]+', '
            decl = decl[:-2]
            out.write('CREATE TABLE "'+table_name+'" ('+decl+');\n')
            for r in values:
                vals = ""
                for i in range(len(typ)):
                    if i >= len(r): break
                    if typ[i] == 'varchar': vals += "'"+r[i].strip().rstrip()+"'"+", "
                    else : vals += str(r[i])+", "
                out.write('INSERT INTO "'+table_name+'" VALUES ('+vals[:-2]+');\n')
            if '['+table_name+']' in point_tables:
                out.write('ALTER TABLE "'+table_name+'" ADD COLUMN fid serial PRIMARY KEY;\n')
                out.write('ALTER TABLE "'+table_name+'" ADD COLUMN geom geometry(''POINT'',2154);\n')
            if '['+table_name+']' in line_tables:
                out.write('ALTER TABLE "'+table_name+'" ADD COLUMN fid serial PRIMARY KEY;\n')
                out.write('ALTER TABLE "'+table_name+'" ADD COLUMN geom geometry(''LINESTRING'',2154);\n')


    line = inp.readline()

